datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  MOD
  ADMIN
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  role           Role            @default(USER)
  accounts       Account[]
  sessions       Session[]
  posts          Post[]
  postUpvotes    PostUpvote[]
  commentUpvotes CommentUpvote[]
  comments       Comment[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id           String       @id @default(cuid())
  title        String
  content      String       @db.Text
  authorId     String
  createdAt    DateTime     @default(now())
  deletedAt    DateTime?
  deleteReason String?
  upvotes      PostUpvote[]
  comments     Comment[]

  author User @relation(fields: [authorId], references: [id])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model PostUpvote {
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model CommentUpvote {
  userId    String
  commentId String

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

model Comment {
  id        String          @id @default(cuid())
  content   String
  authorId  String
  postId    String
  parentId  String?
  createdAt DateTime        @default(now())
  upvotes   CommentUpvote[]

  post    Post      @relation(fields: [postId], references: [id])
  parent  Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentToComment")
  author  User      @relation(fields: [authorId], references: [id])
}
